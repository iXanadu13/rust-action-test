name: Rust Build and Release

on:
  push:
    branches:
      - main

jobs:
  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-18.04
            rust: 1.76.0
            target: x86_64-unknown-linux-gnu
            archive-name: xcpp-linux.tar.gz
          - build: macos
            os: macos-latest
            rust: 1.76.0
            target: x86_64-apple-darwin
            archive-name: xcpp-macos.tar.gz
          - build: windows
            os: windows-2019
            rust: 1.76.0
            target: x86_64-pc-windows-gnu
            archive-name: xcpp-windows.7z
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      - name: Extract version from Cargo.toml
        id: extract_version
        run: echo "VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r .packages[0].version)" >> $GITHUB_ENV

      - name: Strip binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/xcpp"

      - name: Build archive
        shell: bash
        run: |
          mkdir archive
          cp LICENSE README.md archive/
          cd archive
          if [ "${{ matrix.build }}" = "windows" ]; then
            cp "../target/${{ matrix.target }}/release/xcpp.exe" ./
            7z a "${{ matrix.archive-name }}" LICENSE README.md xcpp.exe
          else
            cp "../target/${{ matrix.target }}/release/xcpp" ./
            tar -czf "${{ matrix.archive-name }}" LICENSE README.md xcpp
          fi
      - name: Upload archive
        uses: actions/upload-artifact@v1
        with:
          name: ${{ matrix.archive-name }}
          path: archive/${{ matrix.archive-name }}

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "Release ${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Assets
        uses: actions/upload-artifact@v3
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: archive/${{ matrix.archive-name }}
          asset_name: ${{ matrix.archive-name }}
          asset_content_type: |
            ${{ 
              if endsWith(matrix.archive-name, '.tar.gz') || endsWith(matrix.archive-name, '.tgz') 
              then 'application/gzip' 
              elif endsWith(matrix.archive-name, '.7z') 
              then 'application/x-7z-compressed' 
              else 'application/octet-stream' 
            }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
