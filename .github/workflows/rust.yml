name: Rust Build and Release

on:
  push:
    branches:
      - main

jobs:
  pre-build:
    name: pre-build
    runs-on: ubuntu-20.04
    steps:
      - name: setup GITHUB_ENV
        id: extract_info
        run: |
          echo "VERSION=$(cargo metadata --format-version=1 --no-deps | jq -r .packages[0].version)" >> $GITHUB_ENV
          echo "PACKAGE_NAME=$(cargo metadata --format-version=1 --no-deps | jq -r .packages[0].name)" >> $GITHUB_ENV

  build:
    name: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        build: [linux, macos, windows]
        include:
          - build: linux
            os: ubuntu-20.04
            rust: 1.76.0
            target: x86_64-unknown-linux-gnu
            archive-name: ${{ env.PACKAGE_NAME }}-linux.tar.gz
          - build: macos
            os: macos-latest
            rust: 1.76.0
            target: x86_64-apple-darwin
            archive-name: ${{ env.PACKAGE_NAME }}-macos.tar.gz
          - build: windows
            os: windows-2019
            rust: 1.76.0
            target: x86_64-pc-windows-gnu
            archive-name: ${{ env.PACKAGE_NAME }}-windows.7z
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust }}
          profile: minimal
          override: true
          target: ${{ matrix.target }}

      - name: Build binary
        run: cargo build --verbose --release --target ${{ matrix.target }}
        env:
          RUST_BACKTRACE: 1

      - name: Strip binary (linux and macos)
        if: matrix.build == 'linux' || matrix.build == 'macos'
        run: strip "target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }}"

      - name: Build archive
        shell: bash
        run: |
          mkdir archive
          cp LICENSE README.md archive/
          cd archive
          if [ "${{ matrix.build }}" = "windows" ]; then
            cp "../target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }}.exe" ./
            7z a "${{ matrix.archive-name }}" LICENSE README.md ${{ env.PACKAGE_NAME }}.exe
          else
            cp "../target/${{ matrix.target }}/release/${{ env.PACKAGE_NAME }}" ./
            tar -czf "${{ matrix.archive-name }}" LICENSE README.md ${{ env.PACKAGE_NAME }}
          fi

      - name: Upload archive as workflow artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.archive-name }}
          path: archive/${{ matrix.archive-name }}

  release:
    name: Release
    runs-on: ubuntu-20.04
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download all build artifacts
        uses: actions/download-artifact@v3
        with:
          path: downloaded_artifacts

      - name: List downloaded artifacts
        run: ls -R downloaded_artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          name: "Release ${{ env.VERSION }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Upload Release Assets
      #   uses: actions/upload-release-asset@v1
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./
      #     asset_name: ${{ matrix.archive-name }}
      #     asset_content_type: application/octet-stream
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload ${{ env.PACKAGE_NAME }}-linux.tar.gz to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloaded_artifacts/${{ env.PACKAGE_NAME }}-linux.tar.gz/${{ env.PACKAGE_NAME }}-linux.tar.gz
          asset_name: ${{ env.PACKAGE_NAME }}-linux.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload ${{ env.PACKAGE_NAME }}-macos.tar.gz to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloaded_artifacts/${{ env.PACKAGE_NAME }}-macos.tar.gz/${{ env.PACKAGE_NAME }}-macos.tar.gz
          asset_name: ${{ env.PACKAGE_NAME }}-macos.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload ${{ env.PACKAGE_NAME }}-windows.7z to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: downloaded_artifacts/${{ env.PACKAGE_NAME }}-windows.7z/${{ env.PACKAGE_NAME }}-windows.7z
          asset_name: ${{ env.PACKAGE_NAME }}-windows.7z
          asset_content_type: application/x-7z-compressed
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
